<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.waeating.waitingRecord.model.dao.WaitingRecordMapper">
  
  <resultMap type="com.waeating.waitingRecord.model.dto.WaitingRecordDTO" id="waitingRecordMap">
  	  <id property="recordNo" column="RECORD_NO"/>
  	  <result property="comNo" column="COM_NO"/>
  	  <result property="memberId" column="MEMBER_ID"/>
  	  <result property="useDate" column="USE_DATE"/>
  	  <result property="useStatus" column="USE_STATUS"/>
  	  <result property="memberNum" column="MEMBER_NUM"/>
  	  <result property="requirement" column="REQUIREMENT"/>
  	  <result property="memo" column="MEMO"/>
  	  <result property="countRecordNo" column="COUNT_RECORD_NO"/>
  	  
  	  <association property="comInfo" resultMap="companyResultMap"/>
  	  <association property="memberInfo" resultMap="memberResultMap"/>
  	  <association property="review" resultMap="reviewMap"/>
  	  <association property="refuseReason" resultMap="waitingRefuseMap"/>
  </resultMap>
  
  <resultMap type="com.waeating.com.model.dto.ComInfoDTO" id="companyResultMap">
		<id property="comNo" column="COM_NO"/>
		<result property="memberId" column="MEMBER_ID"/>
		<result property="comName" column="COM_NAME"/>
		<result property="category" column="CATEGORY"/>
		<result property="comAddress" column="COM_ADDRESS"/>
		<result property="comPhone" column="COM_PHONE"/>
		<result property="comRegist" column="COM_REGIST"/>
		<result property="waitYn" column="WAIT_YN"/>
		<result property="workTime" column="WORK_TIME"/>
		<result property="holiday" column="HOLIDAY"/>
	</resultMap>
	
	<resultMap type="com.waeating.member.model.dto.MemberDTO" id="memberResultMap">
		<id property="id" column="MEMBER_ID"/>
		<result property="pwd" column="MEMBER_PWD"/>
		<result property="email" column="EMAIL"/>
		<result property="name" column="NAME"/>
		<result property="memberType" column="MEMBER_TYPE"/>
		<result property="phone" column="PHONE"/>
		<result property="emailCheck" column="EMAIL_CHECK"/>
	</resultMap>
	
	<resultMap type="com.waeating.review.model.dto.ReviewDTO" id="reviewMap">
	  	<id property="reviewNo" column="REVIEW_NO"/>
	  	<result property="reviewContent" column="REVIEW_CONTENT"/>
	  	<result property="ratings" column="RATINGS"/>
	  	<result property="recordNo" column="RECORD_NO"/>
	  	<result property="comNo" column="COM_NO"/>
  	</resultMap>
  
  	<resultMap type="com.waeating.waitingRecord.model.dto.WaitingRefuseDTO" id="waitingRefuseMap">
  		<id property="recordNo" column="RECORD_NO"/>
  		<result property="refuseReason" column="REFUSE_REASON"/>
  	</resultMap>
  
    <select id="selectFinishReservationCount" resultType="_int" parameterType="hashmap">
       SELECT
  	     COUNT(*)
  	FROM WAITING_RECORD A
  	JOIN MEMBER_INFO B ON(A.MEMBER_ID = B.MEMBER_ID)
   WHERE B.MEMBER_ID = #{ userId }
     AND A.USE_STATUS = 'complete'
  	  
  </select>
  
  <select id="selectReservationFinish" resultMap="waitingRecordMap" parameterType="hashmap">
  	SELECT
 		   A.RNUM
 	 	 , A.MEMBER_NUM
  	     , A.USE_DATE
  	     , A.PHONE
  	     , A.COM_NAME
  	     , A.REVIEW_NO
 	FROM(SELECT ROWNUM RNUM
	  	      , B.MEMBER_NUM
	  	      , B.USE_DATE
			  , B.PHONE
			  , B.COM_NAME
			  , B.REVIEW_NO	
	  	   FROM(SELECT
				       C.MEMBER_NUM
				     , C.USE_DATE
				     , D.PHONE
				     , E.COM_NAME
				     , R.REVIEW_NO
				  FROM WAITING_RECORD C
				  JOIN MEMBER_INFO D ON(C.MEMBER_ID = D.MEMBER_ID)
				  JOIN COM_INFO E ON(C.COM_NO = E.COM_NO)
				  LEFT JOIN REVIEW R ON (C.RECORD_NO = R.RECORD_NO)
				  WHERE C.MEMBER_ID = #{ searchValue }
				    AND C.USE_STATUS = 'complete'
	  	  	   ) B
	  	  	      <![CDATA[
				        WHERE ROWNUM <= #{ endRow }
				  ]]>
	  	) A
	 
	 WHERE A.RNUM >= #{ startRow } 
  </select>
  
  <select id="selectCancelReservationCount" resultType="_int" parameterType="hashmap">
    SELECT
  	    COUNT(*)
  	FROM WAITING_RECORD A
    JOIN MEMBER_INFO B ON(A.MEMBER_ID = B.MEMBER_ID)
   WHERE B.MEMBER_ID = #{ userId }
     AND A.USE_STATUS = 'cancel'
  </select>
  
  <select id="selectReservationCancel" resultMap="waitingRecordMap" parameterType="hashmap">
  SELECT
 		   A.RNUM
 	 	 , A.MEMBER_NUM
  	     , A.USE_DATE
  	     , A.PHONE
  	     , A.COM_NAME
 	FROM(SELECT ROWNUM RNUM
	  	      , B.MEMBER_NUM
	  	      , B.USE_DATE
			  , B.PHONE
			  , B.COM_NAME	
	  	   FROM(SELECT
				       C.MEMBER_NUM
				     , C.USE_DATE
				     , D.PHONE
				     , E.COM_NAME
				  FROM WAITING_RECORD C
				  JOIN MEMBER_INFO D ON(C.MEMBER_ID = D.MEMBER_ID)
				  JOIN COM_INFO E ON(C.COM_NO = E.COM_NO)
				  WHERE C.MEMBER_ID = #{ searchValue }
				    AND C.USE_STATUS = 'cancel'
	  	  	   ) B
	  	  	      <![CDATA[
				        WHERE ROWNUM <= #{ endRow }
				  ]]>
	  	) A
	 
	 WHERE A.RNUM >= #{ startRow } 
	 </select>
	 
	 
	 <select id="selectNowReservationCount" resultType="_int" parameterType="hashmap">
	 SELECT
	  	     COUNT(*)
	  	FROM WAITING_RECORD A
	    JOIN MEMBER_INFO B ON(A.MEMBER_ID = B.MEMBER_ID)
	   WHERE B.MEMBER_ID = #{ userId }
	     AND A.USE_STATUS = 'waiting'
	     AND A.USE_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
	 </select>
	 
	<select id="selectReservationNow" resultMap="waitingRecordMap" parameterType="hashmap">
 
	  	   SELECT
				       C.MEMBER_NUM
				     , C.USE_DATE
				     , C.COM_NO
				     , C.RECORD_NO
				     , D.PHONE
				     , E.COM_NAME
				  FROM WAITING_RECORD C
				  JOIN MEMBER_INFO D ON(C.MEMBER_ID = D.MEMBER_ID)
				  JOIN COM_INFO E ON(C.COM_NO = E.COM_NO)
				  WHERE C.MEMBER_ID = #{ userId }
				    AND C.USE_STATUS = 'waiting'
				   
	  	  	   
	 </select>
	 
	 <select id="adminSelectTotalCount" resultType="_int" parameterType="hashmap">
	 	SELECT
	 			COUNT(*)
	 		FROM WAITING_RECORD A
	 		JOIN COM_INFO B ON(A.COM_NO = B.COM_NO)
	 		<!-- 검색조건문 -->
		<where>
			<if test="searchCondition =='id'">
				A.MEMBER_ID LIKE '%' || #{ searchValue } || '%'
			</if>
			<if test="searchCondition =='useStatus'">
				A.USE_STATUS LIKE '%' || #{ searchValue } || '%'
			</if>
			<if test="searchCondition =='name'">
				B.COM_NAME LIKE '%' || #{ searchValue } || '%'
			</if>
		</where>
	 </select>
	 
	 <select id="adminSelectLogList" resultMap="waitingRecordMap">
	 	SELECT
	 			A.RNUM
	 		  , A.RECORD_NO
	 		  , A.COM_NAME
	 		  , A.MEMBER_ID
	 		  , A.USE_DATE
	 		  , A.USE_STATUS
	 	  FROM (SELECT ROWNUM RNUM
	 	  			 , B.RECORD_NO
	 	  			 , B.COM_NAME
	 	  			 , B.MEMBER_ID
	 	  			 , B.USE_DATE
	 	  			 , B.USE_STATUS
	 	  		  FROM(SELECT C.RECORD_NO
	 	  		  			, D.COM_NAME
	 	  		  			, C.MEMBER_ID
	 	  		  			, C.USE_DATE
	 	  		  			, C.USE_STATUS
	 	  		  		 FROM WAITING_RECORD C
	 	  		  		 JOIN COM_INFO D ON(C.COM_NO = D.COM_NO)
	 	  		  		 <where>
							<if test="searchCondition =='id'">
								C.MEMBER_ID LIKE '%' || #{ searchValue } || '%'
							</if>
							<if test="searchCondition =='useStatus'">
								C.USE_STATUS LIKE '%' || #{ searchValue } || '%'
							</if>
							<if test="searchCondition =='name'">
								D.COM_NAME LIKE '%' || #{ searchValue } || '%'
							</if>
						</where>
						ORDER BY C.RECORD_NO DESC
					  ) B
					  <![CDATA[
			     WHERE ROWNUM <= #{ endRow }
			     ]]>
		  )A
		WHERE A.RNUM >= #{ startRow } 
	 </select>
	 
	 <select id="adminSelectLogDetail" parameterType="hashmap" resultMap="waitingRecordMap">
	 	SELECT
	 		    A.COM_NO
	 		  , B.COM_NAME
	 		  , A.MEMBER_ID
	 		  , A.USE_DATE
	 		  , A.USE_STATUS
	 		  , A.MEMBER_NUM
	 		  , A.REQUIREMENT
	 		  , A.MEMO
	 	  FROM WAITING_RECORD A
	 	  JOIN COM_INFO B ON(A.COM_NO = B.COM_NO)
	 	 WHERE A.RECORD_NO = #{ recordNo }
	 </select>
	 
	 <delete id="deleteLog" parameterType = "java.lang.String">
	 	DELETE
	 		FROM WAITING_RECORD A
	 	   WHERE A.RECORD_NO = #{ recordNo }
	 </delete>
	 
	 <update id="adminUpdateLog" parameterType="hashmap">
	 	UPDATE
	 			WAITING_RECORD A
	 	<set>
	 		<if test="status != null and status != ''">
			A.USE_STATUS = #{ status },
			</if>
			<if test="memberNum != null and memberNum != ''">
			A.MEMBER_NUM = #{ memberNum },
			</if>
			<if test="requirement != null and requirement != ''">
			A.REQUIREMENT = #{ requirement },
			</if>
			<if test="memo != null and memo != ''">
			A.MEMO = #{ memo },
			</if>
	 	</set>
	 	WHERE A.RECORD_NO = #{ recordNo }
	 </update>
	 
	 <select id="adminSelectRefuseLogDetail" parameterType="hashmap" resultType="java.lang.String">
	 	SELECT
	 			A.REFUSE_REASON
	 	  FROM WAITING_REFUSE A
	 	  JOIN WAITING_RECORD B ON(A.RECORD_NO = B.RECORD_NO)
	 	 WHERE A.RECORD_NO = #{ recordNo }
	 </select>

	 <select id="selectWaitingRecordAll" resultMap="waitingRecordMap">
	 SELECT
	        A.COM_NO
	      , A.RECORD_NO
	   FROM WAITING_RECORD A
	  WHERE A.MEMBER_ID = #{ userId }
	    AND A.USE_STATUS = 'waiting'     
	 </select>
	 
	 <select id="selectCountRecord" resultType="_int">
	  SELECT 
            COUNT(A.RECORD_NO) COUNT_RECORD_NO
      FROM WAITING_RECORD A
      WHERE A.COM_NO = #{ comNo }
      AND A.USE_STATUS = 'waiting'
      <![CDATA[AND A.RECORD_NO < #{ recordNo } ]]>
      
	 
	 </select>
	 
	 <insert id="insertReservation" parameterType="hashmap">
	 	INSERT
	 	  INTO WAITING_RECORD WR
	 	(
	 		WR.RECORD_NO, WR.COM_NO, WR.MEMBER_ID
	 		, WR.USE_STATUS, WR.MEMBER_NUM, WR.REQUIREMENT
	 	)
	 	VALUES
	 	(
	 		SEQ_RECORDNO.NEXTVAL, #{ comNo }, #{ userId }
	 		, 'waiting', #{ memberNum }, #{ requirement }
	 	)   
	 </insert>
	 
	 <update id="updateReservation" parameterType="hashmap">
	 UPDATE
	         WAITING_RECORD WR
	     SET WR.USE_STATUS = 'cancel'
	   WHERE WR.RECORD_NO = #{ recordNo }      
	 
	 
	 </update>
  </mapper>