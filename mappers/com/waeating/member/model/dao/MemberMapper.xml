<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.waeating.member.model.dao.MemberMapper">
	<resultMap type="com.waeating.member.model.dto.MemberDTO" id="memberResultMap">
		<id property="id" column="MEMBER_ID"/>
		<result property="pwd" column="MEMBER_PWD"/>
		<result property="email" column="EMAIL"/>
		<result property="name" column="NAME"/>
		<result property="memberType" column="MEMBER_TYPE"/>
		<result property="phone" column="PHONE"/>
		<result property="emailCheck" column="EMAIL_CHECK"/>
	</resultMap>
	
	<resultMap type="com.waeating.member.model.dto.MemberDTO" id="generalUserResultMap">
		<id property="id" column="MEMBER_ID"/>
		<result property="pwd" column="MEMBER_PWD"/>
		<result property="email" column="EMAIL"/>
		<result property="name" column="NAME"/>
		<result property="memberType" column="MEMBER_TYPE"/>
		<result property="phone" column="PHONE"/>
		<result property="emailCheck" column="EMAIL_CHECK"/>
		
		<association property="userInfo" resultMap="userResultMap"/>
	</resultMap>
	
	<resultMap type="com.waeating.member.model.dto.UserDTO" id="userResultMap">
		<id property="userId" column="MEMBER_ID"/>
		<result property="birth" column="BIRTH"/>
		<result property="gender" column="GENDER"/>
		
	</resultMap>
	
	<select id="selectEncryptedPwd" resultType="java.lang.String">
		SELECT
				A.MEMBER_PWD
		  FROM MEMBER_INFO A
		 WHERE A.MEMBER_TYPE = #{ memberType }
		   AND A.MEMBER_ID = #{ id }
	</select>
	
	<select id="selectLoginAdmin" resultMap="memberResultMap">
		SELECT
				A.MEMBER_ID
			  , A.EMAIL
			  , A.NAME
			  , A.MEMBER_TYPE
			  , A.PHONE
			  , A.EMAIL_CHECK	
		  FROM MEMBER_INFO A
		 WHERE A.MEMBER_ID = #{ id }
	</select>
	
	<select id="selectTotalCount" resultType="_int" parameterType="hashmap">
		SELECT
				COUNT(*)
			FROM MEMBER_INFO A
		   <!-- 검색조건문 -->
		 <where>
		 	<if test="searchCondition =='id'">
		 		A.MEMBER_ID = #{ searchValue }
		 	</if>
		 	<if test="searchCondition =='name'">
		 		A.NAME LIKE '%' || #{ searchValue } || '%'
		 	</if>
		 	<if test="searchCondition =='email'">
		 		A.EMAIL LIKE '%' || #{ searchValue } || '%'
		 	</if>
		 	<if test="searchCondition =='phone'">
		 		A.PHONE LIKE '%' || #{ searchValue } || '%'
		 	</if>
		 	AND A.MEMBER_TYPE = 'user'
		 </where>
	</select>
	
	<select id="selectMemberList" resultMap="generalUserResultMap">
	   SELECT 
	   			A.RNUM
			  , A.MEMBER_ID
			  , A.MEMBER_PWD
		      , A.EMAIL
			  , A.NAME
			  , A.PHONE
			  , D.BIRTH
			  , D.GENDER	   
	   FROM (SELECT ROWNUM RNUM
				  , B.MEMBER_ID
			      , B.MEMBER_PWD
				  , B.EMAIL
				  , B.NAME
				  , B.PHONE
			   FROM(SELECT C.MEMBER_ID
						 , C.MEMBER_PWD
						 , C.EMAIL
						 , C.NAME
						 , C.PHONE
					  FROM MEMBER_INFO C
					 <where>
						 <if test="searchCondition =='id'">
					 		C.MEMBER_ID = #{ searchValue }
					 	</if>
					 	<if test="searchCondition =='name'">
					 		C.NAME LIKE '%' || #{ searchValue } || '%'
					 	</if>
					 	<if test="searchCondition =='email'">
					 		C.EMAIL LIKE '%' || #{ searchValue } || '%'
					 	</if>
					 	<if test="searchCondition =='phone'">
					 		C.PHONE LIKE '%' || #{ searchValue } || '%'
					 	</if>
					 	AND C.MEMBER_TYPE = 'user'
					 </where>
				  ORDER BY C.MEMBER_ID ASC
				  ) B
				 <![CDATA[
			     WHERE ROWNUM <= #{ endRow }
			     ]]>
		 )A
     JOIN USER_INFO D ON(A.MEMBER_ID = D.MEMBER_ID)
    WHERE A.RNUM >= #{ startRow } 
	</select>
	
	<select id="selectMemberDetail" resultMap ="generalUserResultMap" parameterType="hashMap">
		SELECT
				A.MEMBER_ID
			  , A.MEMBER_PWD
			  , A.EMAIL
			  , A.NAME
			  , A.PHONE
			  , B.BIRTH
			  , B.GENDER
			FROM MEMBER_INFO A
			JOIN USER_INFO B ON(A.MEMBER_ID = B.MEMBER_ID)
		   WHERE A.MEMBER_ID = #{ memberId }
	</select>
	
	<update id="adminUpdateMember" parameterType="hashmap">
		UPDATE
			MEMBER_INFO A
		<set>
			<if test="name != null and name != ''">
				A.NAME = #{ name },
			</if>
			<if test="pwd != null and pwd != ''">
				A.MEMBER_PWD = #{ pwd },
			</if>
			<if test="email != null and email != ''">
				A.EMAIL = #{ email },
			</if>
			<if test="phone != null and phone != ''">
				A.PHONE = #{ phone },
			</if>
		</set>
		WHERE A.MEMBER_ID = #{ id }
	</update>
	
	<update id="adminUpdateUser" parameterType="hashMap">
		UPDATE
			USER_INFO A
		<set>
			<if test="birth != null and birth != ''">
				A.BIRTH = #{ birth },
			</if>
			<if test="gender != null and gendeer != ''">
				A.GENDER = #{ gender },
			</if>
		</set>
		WHERE A.MEMBER_ID = #{ id }
	</update>
	
	<delete id="deleteMember">
		DELETE
			FROM MEMBER_INFO A
		WHERE A.MEMBER_ID = #{ id }
	</delete>
	
	<select id="selectMemberLogin" resultMap="generalUserResultMap" >
		SELECT
				A.MEMBER_ID
			  , A.MEMBER_PWD
			  , A.EMAIL
			  , A.NAME
			  , A.PHONE
			  , B.BIRTH
			  , B.GENDER
			FROM MEMBER_INFO A
			JOIN USER_INFO B ON(A.MEMBER_ID = B.MEMBER_ID)
		   WHERE A.MEMBER_ID = #{ id }
	</select>
	
	<insert id="insertUser" parameterType="com.waeating.member.model.dto.UserDTO">
		INSERT
		  INTO USER_INFO A
		(
		  A.BIRTH
		, A.GENDER
		, A.MEMBER_ID
		)
		VALUES
		(
		  #{ birth }
		, #{ gender }
		, #{ userId }
		)
	</insert>
	
	<insert id="insertMember" parameterType="com.waeating.member.model.dto.MemberDTO">
		INSERT
		  INTO MEMBER_INFO A
		(
		  A.MEMBER_ID
		, A.MEMBER_PWD
		, A.EMAIL
		, A.NAME
		, A.MEMBER_TYPE
		, A.PHONE
		, A.EMAIL_CHECK
		)
		VALUES
		(
		  #{ id }
		, #{ pwd }
		, #{ email }
		, #{ name }
		, #{ memberType }
		, #{ phone }
		, null
		)
	</insert>
	
	<select id="dubleCkId" resultType="_int">
		SELECT
			   COUNT(*)
		  FROM USER_INFO
		 WHERE MEMBER_ID = #{ dubleCkId }
	</select>
	
	<select id="selectFindIdForEmail" resultMap="generalUserResultMap" >
		SELECT
				A.MEMBER_ID
			FROM MEMBER_INFO A
			JOIN USER_INFO B ON(A.MEMBER_ID = B.MEMBER_ID)
		   WHERE A.NAME = #{ name }
		     AND A.EMAIL = #{ email }
		     AND A.MEMBER_TYPE = #{ memberType }
		     AND B.BIRTH = #{ userInfo.birth }
		     AND B.GENDER = #{ userInfo.gender }
	</select>
	
	<select id="selectFindIdForPhone" resultMap="generalUserResultMap" >
		SELECT
				A.MEMBER_ID
			FROM MEMBER_INFO A
			JOIN USER_INFO B ON(A.MEMBER_ID = B.MEMBER_ID)
		   WHERE A.NAME = #{ name }
		     AND A.PHONE = #{ phone }
		     AND A.MEMBER_TYPE = #{ memberType }
		     AND B.BIRTH = #{ userInfo.birth }
		     AND B.GENDER = #{ userInfo.gender }
	</select>
	
</mapper>